"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
const client_greengrassv2_1 = require("@aws-sdk/client-greengrassv2");
const client_ssm_1 = require("@aws-sdk/client-ssm");
const client_iam_1 = require("@aws-sdk/client-iam");
const ggv2 = new client_greengrassv2_1.GreengrassV2({});
const iam = new client_iam_1.IAM({});
const ssm = new client_ssm_1.SSM({});
const handler = async (event, context) => {
    const accountId = context.invokedFunctionArn.split(":")[4];
    const region = context.invokedFunctionArn.split(":")[3];
    switch (event.RequestType) {
        case 'Create':
        case 'Update': {
            await generateGreengrassServiceRole(ggv2, iam, ssm, accountId, region);
            break;
        }
        case 'Delete': {
            await deleteGreengrassServiceRole(ggv2, iam, ssm);
            break;
        }
        default: {
            throw new Error('Unknown request type');
        }
    }
};
exports.handler = handler;
async function generateGreengrassServiceRole(ggv2, iam, ssm, accountId, region) {
    await ggv2.getServiceRoleForAccount({}).then(async (data) => {
        console.log(`Greengrass service role already exists: ${data.roleArn}, associated at ${data.associatedAt}.`);
    }).catch(async (err) => {
        console.log(err);
        console.log('Greengrass service role does not exist.');
        let roleInput;
        roleInput = {
            RoleName: `Greengrass_ServiceRole${Date.now()}`,
            AssumeRolePolicyDocument: JSON.stringify({
                Version: "2012-10-17",
                Statement: [
                    {
                        Effect: "Allow",
                        Principal: {
                            Service: "greengrass.amazonaws.com"
                        },
                        Action: "sts:AssumeRole",
                        Condition: {
                            StringEquals: {
                                "aws:SourceAccount": `${accountId}`
                            },
                            ArnLike: {
                                "aws:SourceArn": `arn:aws:greengrass:${region}:${accountId}:*`
                            }
                        }
                    }
                ]
            })
        };
        await iam.createRole(roleInput).then(async (createRoleOutput) => {
            await iam.attachRolePolicy({
                PolicyArn: 'arn:aws:iam::aws:policy/service-role/AWSGreengrassResourceAccessRolePolicy',
                RoleName: createRoleOutput.Role?.RoleName,
            }).then(async (attachRolePolicyOutput) => {
                await ggv2.associateServiceRoleToAccount({
                    roleArn: createRoleOutput.Role?.Arn,
                }).then(async (associateServiceRoleToAccountOutput) => {
                    console.log('Associated role successfully!');
                    await ssm.putParameter({
                        Name: process.env.SSM_PARAMETER_NAME,
                        Value: createRoleOutput.Role?.Arn,
                        Type: 'String',
                        Overwrite: true,
                    });
                }).catch(async (err) => {
                    console.log(err);
                });
            });
        });
    });
}
;
async function deleteGreengrassServiceRole(ggv2, iam, ssm) {
    await ssm.getParameter({
        Name: process.env.SSM_PARAMETER_NAME,
    }).then(async (getParameterOutput) => {
        await ggv2.disassociateServiceRoleFromAccount({
            roleArn: getParameterOutput.Parameter?.Value
        }).then(async (disassociateServiceRoleFromAccountOutput) => {
            await iam.listAttachedRolePolicies({
                RoleName: getParameterOutput.Parameter?.Value?.split('/')[1],
            }).then(async (listAttachedRolePoliciesOutput) => {
                await listAttachedRolePoliciesOutput.AttachedPolicies?.forEach(async (attachedPolicy) => {
                    await iam.detachRolePolicy({
                        PolicyArn: attachedPolicy.PolicyArn,
                        RoleName: getParameterOutput.Parameter?.Value?.split('/')[1],
                    });
                });
                await iam.deleteRole({
                    RoleName: getParameterOutput.Parameter?.Value?.split('/')[1],
                }).then(async (deleteRoleOutput) => {
                    console.log('Deleted role successfully!');
                    await ssm.deleteParameter({
                        Name: process.env.SSM_PARAMETER_NAME,
                    });
                });
            });
        });
    });
}
;
//# sourceMappingURL=data:application/json;base64,